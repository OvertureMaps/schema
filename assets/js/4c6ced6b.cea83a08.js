"use strict";(self.webpackChunkoverture_schema=self.webpackChunkoverture_schema||[]).push([[590],{246:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>j,contentTitle:()=>x,default:()=>w,frontMatter:()=>b,metadata:()=>g,toc:()=>_});var t=i(4848),o=i(8453),r=i(1432),s=i(7595),a=i.n(s),d=i(6770),l=i(8285);const c='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: division\ndescription:\n  Divisions are recognized official or non-official organizations of\n  people as seen from a given political perspective. Examples include\n  countries, provinces, cities, towns, neighborhoods, etc.\ntype: object\nproperties:     # JSON Schema: Top-level object properties.\n  id: { "$ref": ../defs.yaml#/$defs/propertyDefinitions/id }\n  geometry:\n    description:\n      Division geometry MUST be a Point as defined by GeoJSON schema.\n      It represents the approximate location of a position commonly\n      associated with the real-world entity modeled by the division\n      feature.\n    unevaluatedProperties: false\n    allOf:\n      - "$ref": https://geojson.org/schema/Point.json\n  properties:   # GeoJSON: top-level object \'properties\' property.\n    unevaluatedProperties: false\n    allOf:\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/namesContainer\n      - if:\n          properties:\n            subtype: { enum: [country] }\n        then:\n          required: [names, subtype, country, hierarchies]\n          not: { required: [parent_division_id] }\n        else:\n          required: [names, subtype, country, hierarchies, parent_division_id]\n    properties: # JSON Schema: properties within GeoJSON top-level object \'properties\' property\n      subtype: { "$ref": "./defs.yaml#/$defs/typeDefinitions/placetype" }\n      local_type:\n        description:\n          Local name for the subtype property, optionally localized.\n\n          For example, the Canadian province of Quebec has the subtype\n          \'region\', but in the local administrative hierarchy it is\n          referred to as a \'province\'. Similarly, the Canadian Yukon\n          territory also has subtype \'region\', but is locally called\n          a \'territory\'.\n\n          This property is localized using a standard Overture names\n          structure. So for example, in Switzerland the top-level\n          administrative subdivision corresponding to subtype \'region\'\n          is the canton, which is may be translated in each of\n          Switzerland\'s official languages as, \'canton\' in French, \n          \'kanton\' in German, \'cantone\' in Italian, and \'chantun\' in\n          Romansh.\n        allOf:\n          - "$ref": "../defs.yaml#/$defs/propertyDefinitions/commonNames"\n      country:\n        description: >-\n          ISO 3166-1 alpha-2 country code of the country or country-like\n          entity, that this division represents or belongs to.\n  \n          If the entity this division represents has a country code, the\n          country property contains it. If it does not, the country\n          property contains the country code of the first division\n          encountered by traversing the parent_division_id chain to the\n          root.\n\n          For example:\n            - The country value for the United States is \'US\'\n            - The country value for New York City is \'US\'\n            - The country value for Puerto Rico, a dependency of the US,\n              is \'PR\'.\n            - The country value for San Juan, Puerto Rico is \'PR\'.\n\n          If an entity has an internationally-recognized ISO 3166-1\n          alpha-2 country code, it should always be used. In cases where\n          the schema requires the code but no internationally-recognized\n          code is available, a synthetic code may be used provided it\n          does not conflict with any internationally-recognized codes.\n        allOf:\n          - "$ref": "../defs.yaml#/$defs/propertyDefinitions/iso3166_1Alpha2CountryCode"\n      region:\n        description: >-\n          ISO 3166-2 principal subdivision code of the subdivision-like\n          entity this division represents or belongs to.\n          \n          If the entity this division represents has a principal\n          subdivision code, the region property contains it. If it does\n          not, the region property contains the principal subdivision\n          code of the first division encountered by traversing the\n          parent_division_id chain to the root.\n\n          For example:\n            - The region value for the United States is omitted.\n            - The region value for the U.S. state of New York is \'US-NY\'.\n            - The region value for New York City is \'US-NY\', which it\n              inherits from the state of New York.\n            - The region value for Puerto Rico is \'US-PR\'.\n        allOf:\n          - "$ref": "../defs.yaml#/$defs/propertyDefinitions/iso3166_2SubdivisionCode"\n      hierarchies:\n        description:\n          Hierarchies in which this division participates.\n\n          Every division participates in at least one hierarchy. Most\n          participate in only one. Some divisions may participate in\n          more than one hierarchy, for example if they are claimed by\n          different parent divisions from different political\n          perspectives; or if there are other real-world reasons why the\n          division or one of its ancestors has multiple parents.\n\n          The first hierarchy in the list is the default hierarchy, and\n          the second-to-last entry in the default hierarchy (if there\n          is such an entry) always corresponds to the `parent_division_id\'\n          property. The ordering of hierarchies after the first one is\n          arbitrary.\n        type: array\n        items: { "$ref": "./defs.yaml#/$defs/typeDefinitions/hierarchy" }\n        minItems: 1\n        uniqueItems: true\n      parent_division_id:\n        description:\n          Division ID of this division\'s parent division.\n          \n          Not allowed for top-level divisions (countries) and required\n          for all other divisions.\n          \n          The default parent division is the parent division as seen\n          from the default political perspective, if there is one, and\n          is otherwise chosen somewhat arbitrarily. The hierarchies\n          property can be used to inspect the exhaustive list of\n          parent divisions.\n        allOf:\n          - "$ref": "../defs.yaml#/$defs/propertyDefinitions/id"\n      perspectives:\n        description:\n          Political perspectives from which this division is considered\n          to be an accurate representation.\n\n          If this property is absent, then this division is seen from\n          the default political perspective. If this property is\n          present, then this division is seen from the political\n          perspectives enumerated in the list.\n        type: array\n        items: { "$ref": "./defs.yaml#/$defs/typeDefinitions/perspective" }\n        minItems: 1\n        uniqueItems: true\n      norms:\n        description:\n          Collects information about local norms and rules within the\n          division that are generally useful for mapping and map-related\n          use cases.\n\n          If the norms property or a desired sub-property of the norms\n          property is missing on a division, but at least one of its\n          ancestor divisions has the norms property and the desired\n          sub-property, then the value from the nearest ancestor division\n          may be assumed.\n        "$comment":\n          If we decide to include default language, it will go here. But\n          is it really generally-useful information?\n        type: object\n        unevaluatedProperties: false\n        properties:\n          driving_side:\n            description:\n              Side of the road on which vehicles drive in the division.\n            allOf:\n              - "$ref": "../defs.yaml#/$defs/propertyDefinitions/side"\n      population:\n        description: Population of the division\n        type: integer\n        minimum: 0\n      capital_division_id:\n        description:\n          Division ID of this division\'s capital division. If present,\n          this property will refer to the division ID of the capital\n          city, county seat, etc. of a division.\n        allOf:\n          - "$ref": "../defs.yaml#/$defs/propertyDefinitions/id"\n      wikidata: { "$ref": "../defs.yaml#/$defs/propertyDefinitions/wikidata" }\n';var p=i(1470),h=i(9365);const u='---\nid: example:division:country:us\ntype: Feature\ngeometry:\n  type: Point\n  coordinates: [-100.4458820, 39.7837304]\nproperties:\n  theme: divisions\n  type: division\n  update_time: "2024-02-23T15:08:01Z"\n  version: 0\n  subtype: country\n  names:\n    primary: United States\n  country: US\n  hierarchies:\n    - - division_id: example:division:country:us\n        subtype: country\n        name: United States\n  norms:\n    driving_side: right\n  capital_division_id: example:division:locality:washington_dc\n',y='---\nid: example:division:region:us-ny\ntype: Feature\ngeometry:\n  type: Point\n  coordinates: [-75.8449946, 43.1561681]\nproperties:\n  theme: divisions\n  type: division\n  update_time: "2024-02-23T15:53:17Z"\n  version: 0\n  subtype: region\n  local_type:\n    en: state\n  names:\n    primary: New York\n  sources:\n    - property: ""\n      dataset: OpenStreetMap\n      record_id: R61320.V468\n  country: US\n  region: US-NY\n  hierarchies:\n    - - division_id: example:division:country:us\n        subtype: country\n        name: United States\n      - division_id: example:division:region:us-ny\n        subtype: region\n        name: New York\n  capital_division_id: example:division:locality:albany\n  parent_division_id: example:division:country:us\n',f='---\nid: example:division:borough:bronx\ntype: Feature\ngeometry:\n  type: Point\n  coordinates: [-73.8785937, 40.8466508]\nproperties:\n  theme: divisions\n  type: division\n  update_time: "2024-02-23T15:44:20Z"\n  version: 0\n  subtype: borough\n  local_type:\n    en: borough\n  names:\n    primary: The Bronx\n  country: US\n  region: US-NY\n  hierarchies:\n    - - division_id: example:division:country:us      # Default hierarchy is first.\n        subtype: country\n        name: United States\n      - division_id: example:division:region:us-ny\n        subtype: region\n        name: New York\n      - division_id: example:division:locality:nyc\n        subtype: locality\n        name: New York City\n      - division_id: example:division:borough:bronx\n        subtype: borough\n        name: The Bronx\n    - - division_id: example:division:country:us\n        subtype: country\n        name: United States\n      - division_id: example:division:region:us-ny\n        subtype: region\n        name: New York\n      - division_id: example:division:county:bronx\n        subtype: county\n        name: Bronx County\n      - division_id: example:division:borough:bronx\n        subtype: borough\n        name: The Bronx\n  parent_division_id: example:division:locality:nyc   # Parent from default hierarchy.\n',v='---\nid: example:division:region:ca-on\ntype: Feature\ngeometry:\n  type: Point\n  coordinates: [-86.0009770, 50.0006780]\nproperties:\n  theme: divisions\n  type: division\n  update_time: "2024-02-23T15:55:28Z"\n  version: 0\n  subtype: region\n  local_type:\n    en: province\n  names:\n    primary: Ontario\n  sources:\n    - property: ""\n      dataset: OpenStreetMap\n      record_id: R68841.V267\n  country: CA\n  region: CA-ON\n  hierarchies:\n    - - division_id: example:division:country:ca\n        subtype: country\n        name: Canada\n      - division_id: example:division:region:ca-on\n        subtype: region\n        name: Ontario\n  capital_division_id: example:division:locality:toronto\n  parent_division_id: example:division:country:ca\n  population: 13550900\n',m='---\nid: example:division:perspectives:trnc\ntype: Feature\ngeometry:\n  type: Point\n  coordinates: [33.6252379, 35.2245313]\nproperties:\n  theme: divisions\n  type: division\n  update_time: "2024-02-23T15:08:01Z"\n  version: 0\n  subtype: country\n  names:\n    primary: Kuzey K\u0131br\u0131s\n    common:\n      en: Northern Cyprus\n    rules:\n      - variant: short\n        value: TRNC\n      - variant: official\n        language: en\n        value: Turkish Republic of Northern Cyprus\n  country: XX\n  hierarchies:\n    - - division_id: example:perspectives:trnc\n        subtype: country\n        name: Kuzey K\u0131br\u0131s\n  perspectives:\n    - type: country\n      holder: TR\n',b={title:"division"},x="Division",g={id:"reference/divisions/division",title:"division",description:"A division is a recognized official or non-official organization of people as seen from a given political perspective. Examples of divisions include countries, provinces, cities, towns and neighborhoods.",source:"@site/docs/reference/divisions/division.mdx",sourceDirName:"reference/divisions",slug:"/reference/divisions/division",permalink:"/reference/divisions/division",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"division"},sidebar:"docs",previous:{title:"boundary",permalink:"/reference/divisions/boundary"},next:{title:"division_area",permalink:"/reference/divisions/division_area"}},j={},_=[{value:"Sub-types",id:"sub-types",level:2},{value:"Schema",id:"schema",level:2},{value:"Examples",id:"examples",level:2}];function S(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"division",children:"Division"}),"\n",(0,t.jsx)(n.p,{children:"A division is a recognized official or non-official organization of people as seen from a given political perspective. Examples of divisions include countries, provinces, cities, towns and neighborhoods."}),"\n",(0,t.jsx)("table",{children:(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Geometry Type"}),(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:"Point"})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Theme"}),(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:"divisions"})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Type"}),(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:"division"})})]})]})}),"\n",(0,t.jsx)(n.h2,{id:"sub-types",children:"Sub-types"}),"\n",(0,t.jsxs)(n.p,{children:["A division may have one of two possible sub-types: ",(0,t.jsx)(n.code,{children:"country"})," or ",(0,t.jsx)(n.code,{children:"region"}),"."]}),"\n",(0,t.jsxs)(p.default,{children:[(0,t.jsxs)(h.default,{value:"country",label:"Country",default:!0,children:[(0,t.jsx)("table",{children:(0,t.jsx)("tbody",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:(0,t.jsx)("code",{children:"subtype"})}),(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:"country"})})]})})}),(0,t.jsxs)(n.p,{children:["The border of a country, if known, is given by\n",(0,t.jsx)(n.a,{href:"boundary",children:"boundary"})," features."]})]}),(0,t.jsxs)(h.default,{value:"region",label:"Region",children:[(0,t.jsx)("table",{children:(0,t.jsx)("tbody",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:(0,t.jsx)("code",{children:"subtype"})}),(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:"region"})})]})})}),(0,t.jsx)(n.p,{children:"A region represents a named area that is not formally part of\nthe hierarchical subdivision of a country."})]})]}),"\n",(0,t.jsx)(n.h2,{id:"schema",children:"Schema"}),"\n",(0,t.jsxs)(p.default,{children:[(0,t.jsx)(h.default,{value:"browsable",label:"Browsable",default:!0,children:(0,t.jsx)(a(),{schema:(0,l.A)(c),resolverOptions:(0,d.A)({remote:!0,yamlBasePath:"/divisions"})})}),(0,t.jsx)(h.default,{value:"yaml",label:"YAML",default:!0,children:(0,t.jsx)(r.default,{language:"jsx",children:c})})]}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(p.default,{children:[(0,t.jsx)(h.default,{value:"country",label:"Country",default:!0,children:(0,t.jsx)(r.default,{language:"json",children:JSON.stringify((0,l.A)(u),null,2)})}),(0,t.jsx)(h.default,{value:"region",label:"Region",default:!0,children:(0,t.jsx)(r.default,{language:"json",children:JSON.stringify((0,l.A)(y),null,2)})}),(0,t.jsx)(h.default,{value:"hierarchies",label:"Multiple hierarchies",default:!0,children:(0,t.jsx)(r.default,{language:"json",children:JSON.stringify((0,l.A)(f),null,2)})}),(0,t.jsx)(h.default,{value:"population",label:"Population",default:!0,children:(0,t.jsx)(r.default,{language:"json",children:JSON.stringify((0,l.A)(v),null,2)})}),(0,t.jsx)(h.default,{value:"perspectives",label:"Perspectives",default:!0,children:(0,t.jsx)(r.default,{language:"json",children:JSON.stringify((0,l.A)(m),null,2)})})]})]})}function w(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(S,{...e})}):S(e)}}}]);