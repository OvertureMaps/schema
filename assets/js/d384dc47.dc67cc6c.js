"use strict";(self.webpackChunkoverture_schema=self.webpackChunkoverture_schema||[]).push([[288],{4621:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>h});var t=o(4848),s=o(8453),i=o(1122),r=o(6025);const a={title:"Travel modes"},d="Travel modes",l={id:"themes/transportation/travel-modes",title:"Travel modes",description:"In the real world, a travel mode can be thought of intuitively as a way",source:"@site/docs/themes/transportation/travel-modes.mdx",sourceDirName:"themes/transportation",slug:"/themes/transportation/travel-modes",permalink:"/themes/transportation/travel-modes",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Travel modes"},sidebar:"docs",previous:{title:"Roads",permalink:"/themes/transportation/roads"},next:{title:"Schema Reference",permalink:"/reference"}},c={},h=[{value:"Understanding travel modes",id:"understanding-travel-modes",level:2},{value:"Implied travel modes",id:"implied-travel-modes",level:3},{value:"General definitions",id:"general-definitions",level:3},{value:"When is a travel mode recognized?",id:"when-is-a-travel-mode-recognized",level:3},{value:"Travel mode schema",id:"travel-mode-schema",level:2},{value:"Scoping to travel modes",id:"scoping-to-travel-modes",level:3},{value:"Travel mode scoping: <code>mode</code> and <code>mode_not</code>",id:"travel-mode-scoping-mode-and-mode_not",level:4},{value:"Vehicle attribute scoping: <code>vehicle</code>",id:"vehicle-attribute-scoping-vehicle",level:4},{value:"Similar scoping properties: <code>using</code> and <code>recognized</code>",id:"similar-scoping-properties-using-and-recognized",level:4},{value:"The travel modes taxonomy",id:"the-travel-modes-taxonomy",level:3},{value:"Open questions",id:"open-questions",level:2},{value:"Minimum required travel modes",id:"minimum-required-travel-modes",level:3},{value:"Should we support extension travel modes?",id:"should-we-support-extension-travel-modes",level:3},{value:"Internal consistency",id:"internal-consistency",level:3}];function m(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"travel-modes",children:"Travel modes"}),"\n",(0,t.jsx)(n.p,{children:"In the real world, a travel mode can be thought of intuitively as a way\nof getting from point A to point B. Travel modes can include non-vehicle\nmodes (foot), vehicle modes (a bicycle or motor vehicle) and\noccasionally more granular details (that motor vehicle might be\nclassified as a high occupancy vehicle or a heavy goods vehicle)."}),"\n",(0,t.jsxs)(n.p,{children:["Within the Overture transportation theme's schema model, the real world\nintuition translates to the following definition: a travel mode is a\nrecognized mode by which a person or thing may use a\n",(0,t.jsx)(n.a,{href:"/reference/transportation/segment",children:"segment"})," feature."]}),"\n",(0,t.jsx)(n.h2,{id:"understanding-travel-modes",children:"Understanding travel modes"}),"\n",(0,t.jsx)(n.h3,{id:"implied-travel-modes",children:"Implied travel modes"}),"\n",(0,t.jsxs)(n.p,{children:["Every segment has an ",(0,t.jsx)(n.em,{children:"implied"})," set of travel modes that are allowed to\nuse the segment. For ",(0,t.jsx)(n.a,{href:"roads",children:"road"})," segments, this implied set derives\nfrom the ",(0,t.jsx)(n.a,{href:"roads#road-class",children:"road class"}),", as well as local rules, norms,\nand customs operative where the road segment is situated."]}),"\n",(0,t.jsx)(n.p,{children:"Since this implied set depends on locality or jurisdiction, and is\nsusceptible of varying over time, the Overture transportation schema\ndoes not try to specify the implied set. Resolution of the implied set\nis done by the specific application in the case where this level of\ndetail is important for its proper functioning. Note: an accurate routing\nengine may need this information, whereas a 2D map render or a geocoder\nlikely do not."}),"\n",(0,t.jsx)(n.h3,{id:"general-definitions",children:"General definitions"}),"\n",(0,t.jsxs)(n.p,{children:["Overture's recognized travel modes are defined in general terms that are\nbroadly applicable, for example ",(0,t.jsx)(n.code,{children:"hov"})," is a high-occupancy vehicle and\n",(0,t.jsx)(n.code,{children:"hgv"})," is a heavy goods vehicle. In most jurisdictions, these general\nterms map to a concept that is in use within the jurisdiction, even\nthough the local name for the concept may vary, for example one\njurisdiction may say heavy goods vehicle and another may say\nlarge goods vehicle."]}),"\n",(0,t.jsx)(n.p,{children:"Despite being broadly applicable, travel modes may have different\ndefinitions in different places and at different times."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["in one jurisdiction, an ",(0,t.jsx)(n.code,{children:"hgv"})," might mean any vehicle with a gross\nvehicle weight in excess of 3.5 tonnes (3,500 kg). In another place,\nan ",(0,t.jsx)(n.code,{children:"hgv"})," might have a gross vehicle weight of at least 10,001 lbs."]}),"\n",(0,t.jsxs)(n.li,{children:["in one jurisdiction, an ",(0,t.jsx)(n.code,{children:"hov"})," might require a minimum of 2 passengers\nwhile in another place it might have a higher minimum passenger count,\nor include battery-electric vehicles, or exclude certain classes of\nvehicle or usage."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"As a consequence of the variance in definition across place and time,\nOverture gives only general definitions for travel modes, leaving\nprecise definition to those applications that require them."}),"\n",(0,t.jsx)(n.h3,{id:"when-is-a-travel-mode-recognized",children:"When is a travel mode recognized?"}),"\n",(0,t.jsxs)(n.p,{children:["A travel mode is recognized by the Overture transportation schema when\nit becomes part of the ",(0,t.jsx)(n.a,{href:"https://github.com/OvertureMaps/schema/blob/5f82f1d6a916031cb32730e1fac7e1a353f10c60/schema/transportation/segment.yaml#L103",children:(0,t.jsx)(n.code,{children:"mode"})}),"\nenumeration. As of our draft schema release ",(0,t.jsx)(n.code,{children:"v0.4.0"}),", this enumeration\nis relatively small and contains only travel modes which we have some\nconfidence will be generally-applicable both across jurisdictions and\nover time. We expect the list to change in future schema updates, to be\nlarger once we reach a table ",(0,t.jsx)(n.code,{children:"v1.0.0"})," schema, and to continue to expand\nas the world changes and new information arises."]}),"\n",(0,t.jsx)(n.p,{children:"Our criteria for recognizing a proposed new travel mode are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"the proposed new travel mode should represent a generally-accepted\nconcept meaning that the concept exists in many places with roughly\nthe same definition."}),"\n",(0,t.jsx)(n.li,{children:"the proposed new travel mode should be referred to with well-known\nsign iconography or sign text in those jurisdictions where the\nconcept exists; and this iconography or sign text is preferably\nsomewhat consistent across many jurisdictions and over time."}),"\n",(0,t.jsxs)(n.li,{children:["it must be possible to give a relatively precise definition to the\nproposed new travel mode and explain how it differs from, or\n",(0,t.jsx)(n.em,{children:"intersects"})," with, other similar travel modes which are already\nrecognized in the Overture schema."]}),"\n",(0,t.jsxs)(n.li,{children:["the proposed new travel mode should preferably not be trivially\nexpressible using another existing\n",(0,t.jsx)(n.a,{href:"/overview/feature-model/scoping-rules#scoped-values-and-scoping-properties",children:"scoping property"}),".\n(",(0,t.jsxs)(n.em,{children:["An example of such a trivially-expressible concept might be a\nthree-axle vehicle which is more appropriately phrased as\n",(0,t.jsx)(n.code,{children:"vehicle: { axle_count: { is_equal_to: 3 } }"}),"."]}),")"]}),"\n",(0,t.jsx)(n.li,{children:"the proposed new travel mode must be supported by existing data in at\nleast one of Overture's upstream data sources."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["There is a risk that the above-described approach will be too slow to\nadapt to our users' needs in a vast, ever-changing world. One possible\navenue to mitigate this risk is supporting\n",(0,t.jsx)(n.a,{href:"#should-we-support-extension-travel-modes",children:"custom extensions"})," to the\nbuilt-in list of recognized travel modes."]}),"\n",(0,t.jsx)(n.h2,{id:"travel-mode-schema",children:"Travel mode schema"}),"\n",(0,t.jsx)(n.h3,{id:"scoping-to-travel-modes",children:"Scoping to travel modes"}),"\n",(0,t.jsxs)(n.p,{children:["Travel modes can be used to change the scope of scoped and rule-based\nproperties within the schema. For example, they can affect the scope of\naccess restrictions, turn restrictions, or speed limits on ",(0,t.jsx)(n.a,{href:"roads",children:"road"}),"\nsegments. Since travel modes are expressed via scoping properties, it\nis recommended to read the section on\n",(0,t.jsx)(n.a,{href:"/overview/feature-model/scoping-rules",children:"scoped and rule-based properties"})," before proceeding further."]}),"\n",(0,t.jsxs)(n.h4,{id:"travel-mode-scoping-mode-and-mode_not",children:["Travel mode scoping: ",(0,t.jsx)(n.code,{children:"mode"})," and ",(0,t.jsx)(n.code,{children:"mode_not"})]}),"\n",(0,t.jsxs)(n.p,{children:["Two scoping properties control whether a given scoped property applies\nto a given travel mode: ",(0,t.jsx)(n.code,{children:"mode"})," and ",(0,t.jsx)(n.code,{children:"mode_not"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If either ",(0,t.jsx)(n.code,{children:"mode"})," or ",(0,t.jsx)(n.code,{children:"mode_not"})," property is specified, the property value\nmust be a non-empty, array of travel modes, and is interpreted as a set.\nValues must be unique, but order is not important."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"mode"})," and ",(0,t.jsx)(n.code,{children:"mode_not"})," properties are not mutually exclusive: in\nplaces where scoping by travel mode is allowed, either ",(0,t.jsx)(n.code,{children:"mode"})," or\n",(0,t.jsx)(n.code,{children:"mode_not"}),", or both, may be provided."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Neither"}),". When neither ",(0,t.jsx)(n.code,{children:"mode"})," nor ",(0,t.jsx)(n.code,{children:"mode_not"})," is provided, the\nparent property's scope includes all default travel modes implied by\nthe ",(0,t.jsx)(n.a,{href:"roads#road-class",children:"road class"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Only ",(0,t.jsx)(n.code,{children:"mode"})]}),". When ",(0,t.jsx)(n.code,{children:"mode"})," is provided by itself, the parent\nproperty is scoped to include only those travel modes that included\nin the ",(0,t.jsx)(n.code,{children:"mode"})," set."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Only ",(0,t.jsx)(n.code,{children:"mode_not"})]}),". When ",(0,t.jsx)(n.code,{children:"mode_not"})," is provided by itself, the parent\nproperty is scoped to include all those travel modes that are not\nincluded in the ",(0,t.jsx)(n.code,{children:"mode_not"})," set."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Both"}),". When both ",(0,t.jsx)(n.code,{children:"mode"})," and ",(0,t.jsx)(n.code,{children:"mode_not"})," are provided, the parent\nproperty is scoped to include all those travel modes that are\nincluded in the ",(0,t.jsx)(n.code,{children:"mode"})," set except those that are included in the\n",(0,t.jsx)(n.code,{children:"mode_not"})," set. For example,\n",(0,t.jsx)(n.code,{children:"mode: [motor_vehicle], mode_not: [motorcycle]"}),' expresses the travel\nmode scope "all motor vehicles except motorcycles".']}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"vehicle-attribute-scoping-vehicle",children:["Vehicle attribute scoping: ",(0,t.jsx)(n.code,{children:"vehicle"})]}),"\n",(0,t.jsxs)(n.p,{children:["Because travel modes are an fuzzy concept, there are inevitably areas\nof overlap between with the more precise, but more limited, ",(0,t.jsx)(n.code,{children:"vehicle"}),"\nscoping property which is used for\n",(0,t.jsx)(n.a,{href:"/overview/feature-model/scoping-rules#vehicle-attributes-scoping",children:"vehicle attributes scoping"}),". Where there is potential overlap, the method of scoping used in Overture\ndata releases will depend on how the upstream data source has expressed\nthe equivalent concept. Where there is choice, it is preferable to\nselect the scoping method that most accurately reflects the intention\nexpressed on local signage."]}),"\n",(0,t.jsxs)(n.h4,{id:"similar-scoping-properties-using-and-recognized",children:["Similar scoping properties: ",(0,t.jsx)(n.code,{children:"using"})," and ",(0,t.jsx)(n.code,{children:"recognized"})]}),"\n",(0,t.jsxs)(n.p,{children:["The scoping properties ",(0,t.jsx)(n.code,{children:"using"})," and ",(0,t.jsx)(n.code,{children:"recognized"})," express concepts that\nare meant to be orthogonal to (completely separate from) travel modes."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"using"})," property indicates\n",(0,t.jsx)(n.a,{href:"/overview/feature-model/scoping-rules#purpose-of-use-scoping",children:"purpose of use"})," scoping, which\nrelates to the purpose for which the person or thing travelling is\nusing a given segment of the transportation network. Travel modes\nshould ideally not embed a purpose of use."]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"recognized"})," property indicates\n",(0,t.jsx)(n.a,{href:"/overview/feature-model/scoping-rules#status-scoping-membership-in-a-recognized-group",children:"status scoping"}),",\nwhich relates to a recognized status given to the person or thing\ntravelling, where the recognized status is distinct from the mode of\ntravel itself. Travel modes should ideally not embed a status."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"the-travel-modes-taxonomy",children:"The travel modes taxonomy"}),"\n",(0,t.jsxs)(n.p,{children:["Overture travel modes form a shallow taxonomy. Some travel modes are\nmore general, while others are more specific, and a more general travel\nmode may contain a more specific one. For example, the general travel\nmode ",(0,t.jsx)(n.code,{children:"vehicle"})," contains the more specific mode ",(0,t.jsx)(n.code,{children:"motor_vehicle"}),". The\ntaxonomy supported in our draft schema ",(0,t.jsx)(n.code,{children:"v0.8.0"})," can be visualized in the\ndiagram below."]}),"\n",(0,t.jsxs)("figure",{children:[(0,t.jsx)("div",{style:{textAlign:"center"},children:(0,t.jsx)(i.A,{alt:"Overture travel modes taxonomy",sources:{light:(0,r.A)("/img/transportation/travel-modes-light.png"),dark:(0,r.A)("/img/transportation/travel-modes-dark.png")}})}),(0,t.jsx)("figcaption",{children:(0,t.jsx)("div",{style:{textAlign:"center"},children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"The Overture travel modes taxonomy."})})})})]}),"\n",(0,t.jsxs)(n.p,{children:["As many of the above travel modes draw on the body of knowledge\naccumulated in relation to OpenStreetMap\n",(0,t.jsx)(n.a,{href:"https://wiki.openstreetmap.org/wiki/Key:access#Transport_mode_restrictions",children:"transport mode access restrictions"}),",\nOverture would like acknowledge a intellectual debt to the OSM community in\nrelation to travel modes as well as to other aspects of the\ntransportation schema."]}),"\n",(0,t.jsx)(n.h2,{id:"open-questions",children:"Open questions"}),"\n",(0,t.jsxs)(n.p,{children:["This section discusses some open questions are debating internally with\nregard to travel modes. We would love to hear\n",(0,t.jsx)(n.a,{href:"https://github.com/OvertureMaps/schema/discussions",children:"your feedback"})," on\nthese questions and any others that you may have."]}),"\n",(0,t.jsx)(n.h3,{id:"minimum-required-travel-modes",children:"Minimum required travel modes"}),"\n",(0,t.jsx)(n.p,{children:"We're not yet certain on the minimum set of recognized travel modes is\nthat will make the Overture Transportation schema as usable as possible\nto as broad an audience as possible. What do you think we are missing?"}),"\n",(0,t.jsx)(n.h3,{id:"should-we-support-extension-travel-modes",children:"Should we support extension travel modes?"}),"\n",(0,t.jsx)(n.p,{children:"We live in a time of rapid technological and regulatory iteration in\nthe transportation space. The speed of change raises the possibility\nthat no matter how quickly we extend the travel modes recognized in the\nOverture schema, the schema will always be behind the real world, at\nleast in some local areas and with regard to some technologies, customs,\nor local rules."}),"\n",(0,t.jsxs)(n.p,{children:["One possibility to keep the Overture schema maximally usable for users\nwho are mapping at the cutting edge is to allow custom extensions to\nthe list of travel modes. If we did this consistently with how extension\nproperties\nwork for features, we could, for example, allow travel mode names with\nthe ",(0,t.jsx)(n.code,{children:"ext_*"})," to be ignored by the schema validation rules."]}),"\n",(0,t.jsx)(n.h3,{id:"internal-consistency",children:"Internal consistency"}),"\n",(0,t.jsxs)(n.p,{children:["As alluded to ",(0,t.jsx)(n.a,{href:"#vehicle-attribute-scoping-vehicle",children:"above"}),", there is some\noverlap between the fuzzy concept of travel modes and vehicle attribute\nscoping. We're aware of this overlap and view it as limited but\ninevitable."]}),"\n",(0,t.jsxs)(n.p,{children:["Our intention is, however, to reduce or eliminate the overlap between\ntravel modes and the other\n",(0,t.jsx)(n.a,{href:"#similar-scoping-properties-using-and-recognized",children:"similar scoping properties"}),"\n(",(0,t.jsx)(n.code,{children:"using"})," and ",(0,t.jsx)(n.code,{children:"recognized"}),"). One area where we may have been unsuccessful\nis the ",(0,t.jsx)(n.code,{children:"emergency"})," travel mode in the ",(0,t.jsx)(n.a,{href:"#the-travel-modes-taxonomy",children:"current taxonomy"}),".\nArguably, ",(0,t.jsx)(n.code,{children:"emergency"})," should be removed from the taxonomy, and an\n",(0,t.jsx)(n.code,{children:"as_emergency_responder"})," should be included in the status values\nenumeration for the ",(0,t.jsx)(n.code,{children:"recognized"})," property."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}}}]);