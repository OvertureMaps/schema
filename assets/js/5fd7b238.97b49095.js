"use strict";(self.webpackChunkoverture_schema=self.webpackChunkoverture_schema||[]).push([[60],{4259:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=s(4848),n=s(8453);const a={title:"Feature Model"},i=void 0,o={id:"overview/feature-model/index",title:"Feature Model",description:"Key Concepts",source:"@site/docs/overview/feature-model/index.mdx",sourceDirName:"overview/feature-model",slug:"/overview/feature-model/",permalink:"/overview/feature-model/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Feature Model"},sidebar:"docs",previous:{title:"Introduction",permalink:"/"},next:{title:"Names",permalink:"/overview/feature-model/names"}},l={},d=[{value:"Key Concepts",id:"key-concepts",level:2},{value:"Features Represent Entities",id:"features-represent-entities",level:2},{value:"Common Properties",id:"common-properties",level:2},{value:"Complex Attributes",id:"complex-attributes",level:2},{value:"Extensible Attributes",id:"extensible-attributes",level:2},{value:"Measurements",id:"measurements",level:2},{value:"Data Formats",id:"data-formats",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,r.jsxs)(t.p,{children:["Overture data is described using the ",(0,r.jsx)(t.a,{href:"https://www.ogc.org/standard/sfa/",children:"simple feature model"})," specified by the Open Geospatial Consortium. Each feature includes a geometric object with a unique ID and associated properties. For example, the Town Hall building in Seattle is represented in the Overture buildings dataset as a ",(0,r.jsx)(t.a,{href:"https://geojson.org/",children:"GeoJSON"})," feature that looks like this:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\n  "id": "08828d542c9fffff02ffffff1953aec1",\n  "type": "Feature",\n  "geometry": {\n    "type": "Polygon",\n    "coordinates": [\n      [ [-122.3301821, 47.6090116],[-122.3301197, 47.6089409],[-122.3300642, 47.6088779],[-122.3300094, 47.6088158],[-122.329729, 47.6089282],[-122.3297466, 47.6089481],[-122.3296561, 47.6089844],[-122.3296934, 47.6090266],[-122.3297562, 47.6090978], [-122.3298113, 47.6091603],[-122.3298611, 47.6092168],[-122.3299517, 47.6091804],[-122.329963, 47.6091932],[-122.3299793, 47.6091867],[-122.3301728, 47.6091091],[-122.3301916, 47.6091016],[-122.3301714, 47.6090787],[-122.330223, 47.609058] ]\n    ]\n  },\n  "properties": {\n    "theme": "buildings",\n    "type": "building",\n    "version": 0,\n    "update_time": "2023-01-30T00:04:13.000Z",\n    "height": 22.7,\n    "num_floors": 3,\n    "class": "civic",\n    "names": {\n      "primary": "Town Hall Seattle"\n    },\n    "sources": [\n      {\n        "property": "dataset",\n        "dataset": "OpenStreetMap,"\n        "record_id": "w140675988@10"\n      },\n      {\n        "property": "/properties/height",\n        "dataset": "USGS Lidar"\n      }\n    ]\n  }\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"features-represent-entities",children:"Features Represent Entities"}),"\n",(0,r.jsx)(t.p,{children:"Features in the Overture corpus represent entities in the real world. An entity is a physical thing or concept: a segment of road, a city boundary, a grocery store, a building or a park. Overture assigns unique IDs, called GERS IDs, to these features. In most cases it's helpful to think of an entity and a feature as the same thing, but in practice it can be more complicated. An entity could be represented by multiple features in a geospatial dataset, and a feature in a dataset might be a representation of multiple entities. For example, a school building and its entrances and exits might be considered a single entity in the real world but could be represented as multiple features in a dataset, each feature with its own GERS ID."}),"\n",(0,r.jsx)(t.h2,{id:"common-properties",children:"Common Properties"}),"\n",(0,r.jsx)(t.p,{children:"The Overture corpus has a core set of properties for every feature."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"theme"}),":\nthemes are top-level categories of map features."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"type"}),": a theme may have multiple types of features; the transportation theme, for example, has both segments and connectors."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"sources"}),": this is the array of information about the data sources from which a feature's attributes originated."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"version"}),": the version number of a feature is incremented in each Overture release whenever the geometry or attributes of the feature change."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"update_time"}),": the timestamp indicates when the feature was last updated."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Different theme and type values will contribute additional properties to the schema. For example, in the building described above, the buildings ",(0,r.jsx)(t.code,{children:"theme"})," with building ",(0,r.jsx)(t.code,{children:"type"})," has a ",(0,r.jsx)(t.code,{children:"class"})," property that defines what kind of building it is, in this case a civic building. It also has an optional ",(0,r.jsx)(t.code,{children:"height"})," property. You can find more detail about the properties associated with each theme and type in the Schema Themes and Schema Reference sections of this documentation."]}),"\n",(0,r.jsx)(t.h2,{id:"complex-attributes",children:"Complex Attributes"}),"\n",(0,r.jsx)(t.p,{children:"Some feature properties are quite complex and require further explanation in the documentation."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"/gers/",children:"Global Entity Reference System (GERS) IDs"})}),": the ",(0,r.jsx)(t.a,{href:"/gers",children:"Global Entity Reference System"})," is responsible for handling persistent identification across entities in the Overture corpus."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"names",children:"Names"})}),": where applicable, complex attributes such as names will always use the same schema across all themes."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"scoping-rules",children:"Scoped and rule-based properties"})}),": a scoping property narrows the scope of its parent property and may only apply to a particular instance of the parent property; rule-based property is an array of rules, which are objects containing at least one scoping property."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"extensible-attributes",children:"Extensible Attributes"}),"\n",(0,r.jsxs)(t.p,{children:["Any additional top-level property prefixed with ",(0,r.jsx)(t.code,{children:"ext_"})," may be added to an Overture feature, usually via the conflation of an external dataset and an Overture dataset."]}),"\n",(0,r.jsx)(t.h2,{id:"measurements",children:"Measurements"}),"\n",(0,r.jsxs)(t.p,{children:["Measurements of real-world objects and features follow ",(0,r.jsx)(t.a,{href:"https://www.bipm.org/en/publications/si-brochure",children:"The International System of Units (SI)"}),": heights, widths, lengths, etc. In the Overture schema, these values are provided as scalar numeric value without units such as feet or meters. Overture does this to maximize consistency and predictability."]}),"\n",(0,r.jsx)(t.p,{children:"Quantities specified in regulatory rules, norms and customs follow local specifications wherever possible. In the schema, these values are provided as two-element arrays where the first element is the scalar numeric value and the second value is the units. Overture uses local units of measurement -- feet in the United States and meters in the EU, for example."}),"\n",(0,r.jsx)(t.h2,{id:"data-formats",children:"Data Formats"}),"\n",(0,r.jsxs)(t.p,{children:["Overture describes data using a GeoJSON mental model and represents data as GeoJSON features. Overture distributes data as ",(0,r.jsx)(t.a,{href:"https://geoparquet.org/",children:"GeoParquet"}),". This documentation includes many examples of how to work with data stored in GeoParquet files."]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);