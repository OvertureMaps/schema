---
"$schema": https://json-schema.org/draft/2020-12/schema
title: Overture Maps Feature Schema Common Definitions
description: Common schema definitions shared by all themes
"$defs":
  propertyDefinitions:
    id:
      type: string
      description: >-
        A feature ID. This may be an ID associated with the Global
        Entity Reference System (GERS) ifâ€”and-only-if the feature
        represents an entity that is part of GERS.
      minLength: 1
      pattern: ^(\S.*)?\S$    # Leading and trailing whitespace are not allowed.
    level:
      description: Z-order of the feature where 0 is visual level
      type: integer
      default: 0
    featureType:
      description: Specific feature type within the theme
      type: string
      enum:
        - administrative_boundary # DEPRECATED
        - boundary
        - building
        - connector
        - division
        - division_area
        - infrastructure
        - land
        - land_use
        - locality                # DEPRECATED
        - locality_area           # DEPRECATED
        - building_part
        - place
        - segment
        - water
    featureUpdateTime:
      description: Timestamp when the feature was last updated
      type: string
      format: date-time
      pattern: ^([1-9]\d{3})-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])T([01]\d|2[0-3]):([0-5]\d):([0-5]\d|60)(\.\d{1,3})?(Z|[-+]([01]\d|2[0-3]):[0-5]\d)$
      "$comment": >-
        Pattern is used as a fallback because not all JSON schema
        implementations treat "format" as an assertion, for some it is
        only an annotation.

        A somewhat more compact approach would be to reference the
        Overture version where the feature last changed instead of the
        update time, and expect clients to do a lookup if they really
        care about the time.
    featureVersion:
      description: >-
        Version number of the feature, incremented in each Overture
        release where the geometry or attributes of this feature
        changed.
      type: integer
      minimum: 0
      "$comment": >-
        It might be reasonable to combine "update_time" and "version"
        in a single "updateVersion" field which gives the last Overture
        version number in which the feature changed. The downside to
        doing this is that the number would cease to be indicative of
        the "rate of change" of the feature.
    sources:
      description: >-
        The array of source information for the properties of a
        given feature, with each entry being a source object which
        lists the property in JSON Pointer notation and the dataset
        that specific value came from. All features must have a root
        level source which is the default source if a specific
        property's source is not specified.
      type: array
      items: { "$ref": "#/$defs/propertyDefinitions/property" }
      minItems: 1
      uniqueItems: true
    property:
      description: >-
        An object storing the source for a specificed property. The property
        is a reference to the property element within this Feature, and will be
        referenced using JSON Pointer Notation RFC 6901
        (https://datatracker.ietf.org/doc/rfc6901/). The source dataset for
        that referenced property will be specified in the overture list of
        approved sources from the Overture Data Working Group that contains
        the relevant metadata for that dataset including license source organization.
      type: object
      required: [property, dataset]
      unevaluatedProperties: false
      properties:
        property:
          type: string
        dataset:
          type: string
        record_id:
          type: string
          description: Refers to the specific record within the dataset that was used.
        confidence:
          description: Confidence value from the source dataset, particularly relevant for ML-derived data.
          type: number
          minimum: 0
          maximum: 1
    theme:
      description: Top-level Overture theme this feature belongs to
      type: string
      enum:
        - admins
        - base
        - buildings
        - divisions
        - places
        - transportation
    linearlyReferencedPosition:
      description: >-
        Represents a linearly-referenced position between 0% and 100% of
        the distance along a path such as a road segment or a river
        center-line segment.
      type: number
      minimum: 0
      maximum: 1
      "$comment": >-
        One possible advantage to using percentages over absolute
        distances is being able to trivially validate that the position
        lies "on" its segment (i.e. is between zero and one). Of course,
        this level of validity doesn't mean the number isn't nonsense.
    linearlyReferencedRange:
      description:
        Represents a non-empty range of positions along a path as a pair
        linearly-referenced positions. For example, the pair [0.25, 0.5]
        represents the range beginning 25% of the distance from the
        start of the path and ending 50% oof the distance from the path
        start.
      type: array
      items: { "$ref": "#/$defs/propertyDefinitions/linearlyReferencedPosition" }
      minItems: 2
      maxItems: 2
      uniqueItems: true
      "$comment":
        Ideally we would enforce sorted order of this pair, but sorting
        assertions aren't (yet?) supported by JSON schema.
    side:
      description:
        Represents the side on which something appears relative to a
        facing or heading direction, e.g. the side of a road relative
        to the road orientation, or relative to the direction of travel
        of a person or vehicle.
      type: string
      enum: [left, right]
    openingHours:
      description: >-
        Time span or time spans during which something is open or
        active, specified in the OSM opening hours specification:
          https://wiki.openstreetmap.org/wiki/Key:opening_hours/specification
      type: string
      "$comment": >-
          Validating the opening hours value is going to have to happen outside of JSON Schema.

          Reasons for using the OSM opening hours specification for
          transportation rule time restrictions are documented in
          https://github.com/OvertureMaps/schema-wg/pull/10
    language:
      description: >-
        An IETF-BCP47 language tag, as defined in
        https://www.rfc-editor.org/rfc/bcp/bcp47.txt.

        Although the BCP47 language tag definition is complex, a simplified
        view defines a language as "language-script-region" where script and
        region are optional. The specification lists allowed values for language,
        script, and region. It further describes how to include variants,
        extensions and other private custom extensions, which are allowed but
        not described here.

        For some languages, the "Suppress-Script" property in BCP47 defines a
        script that can be omitted from the language tag. For example, the
        "Latn" script can be omitted for the "en" language. By convention,
        Overture will always omit the script when it matches the Suppress-Script
        property for a language. In other words, "en-Latn" is forbidden in favor
        of "en", and same for "ru-Cyrl" in favor of "ru".

        The complete lists of allowed values can be found at:
        https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry
      type: string
      pattern: "^[a-zA-Z]{2,3}(-[a-zA-Z]{4})?(-[a-zA-Z]{2})?$"
      "$comment": >-
          The "pattern" is mostly a placeholder. It captures the
          language[-script][-region] variation of BCP47 but not the
          "grandfathered" values and other variants and extensions.
    nameRule:
      type: object
      required: [value]
      allOf:
        - { "$ref": "#/$defs/propertyContainers/geometricRangeScopeContainer" }
        - { "$ref": "#/$defs/propertyContainers/sideScopeContainer" }
      properties:
        variant:
          type: string
          enum:
            - common
            - official
            - alternate
            - short
        language: { "$ref": "#/$defs/propertyDefinitions/language" }
        value:
          type: string
          minLength: 1
          pattern: ^(\S.*)?\S$    # Leading and trailing whitespace are not allowed.
    allNames:
      type: object
      required: [primary]
      unevaluatedProperties: false
      properties:
        primary:
          description: The most commonly used name.
          type: string
          minLength: 1
          pattern: ^(\S.*)?\S$    # Leading and trailing whitespace are not allowed.
        common: { "$ref": "#/$defs/propertyDefinitions/commonNames" }
        rules:
          description: >-
            Rules for names that cannot be specified in the simple
            common names property. These rules can cover other name
            variants such as official, alternate, and short; and they
            can optionally include geometric scoping (linear
            referencing) and side-of-road scoping for complex cases.
          type: array
          items: { "$ref": "#/$defs/propertyDefinitions/nameRule" }
          minItems: 1
    commonNames:
      description: The common translations of the name.
      type: object
      minProperties: 1
      additionalProperties: false
      patternProperties:
        "^[a-zA-Z]{2,3}(-[a-zA-Z]{4})?(-[a-zA-Z]{2})?$":
          "$comment": >-
            This is an incomplete pattern for BCP47 language tags.
          type: string
          minLength: 1
          pattern: ^(\S.*)?\S$    # Leading and trailing whitespace are not allowed.
    iso3166_1Alpha2CountryCode:
      description: ISO 3166-1 alpha-2 country code.
      type: string
      minLength: 2
      maxLength: 2
      pattern: ^[A-Z]{2}$
    iso3166_2SubdivisionCode:
      description: ISO 3166-2 principal subdivision code.
      type: string
      minLength: 4
      maxLength: 6
      pattern: ^[A-Z]{2}-[A-Z0-9]{1,3}$
    address:
      type: object
      unevaluatedProperties: false
      properties:
        freeform:
          description: >-
            Free-form address that contains street name, house number
            and other address info
          type: string
        locality:
          description: >-
            Name of the city or neighborhood where the address is
            located
          type: string
        postcode:
          description: Postal code where the address is located
          type: string
        region: { "$ref": "#/$defs/propertyDefinitions/iso3166_2SubdivisionCode" }
        country: { "$ref": "#/$defs/propertyDefinitions/iso3166_1Alpha2CountryCode" }
    wikidata:
      description: A wikidata ID if available, as found on https://www.wikidata.org/.
      type: string
      pattern: ^Q\d+
  propertyContainers:
    overtureFeaturePropertiesContainer:
      title: overture properties
      description: Top-level properties shared by all Overture features
      type: object
      required: [ theme, type, version, update_time ]
      patternProperties:
        ^ext_.*$:
          description: "Additional top-level properties must be prefixed with `ext_`."
      properties:
        theme: { "$ref": "#/$defs/propertyDefinitions/theme" }
        type: { "$ref": "#/$defs/propertyDefinitions/featureType" }
        version: { "$ref": "#/$defs/propertyDefinitions/featureVersion" }
        update_time: { "$ref": "#/$defs/propertyDefinitions/featureUpdateTime" }
        sources: { "$ref": "#/$defs/propertyDefinitions/sources" }
    namesContainer:
      title: names
      description: Properties defining the names of a feature.
      type: object
      properties:
        names:
          "$ref": "#/$defs/propertyDefinitions/allNames"
    levelContainer:
      title: level
      description: Properties defining feature Z-order, i.e., stacking order
      type: object
      properties:
        level:
          "$ref": "#/$defs/propertyDefinitions/level"
    geometricRangeScopeContainer:
      description: >-
        Geometric scoping properties defining the range of positions on
        the segment where something is physically located or where a
        rule is active.
      properties:
        between: { "$ref": "#/$defs/propertyDefinitions/linearlyReferencedRange" }
    sideScopeContainer:
      description: >-
        Geometric scoping properties defining the side of a road modeled when
        moving along the line from beginning to end
      properties:
        side: { "$ref": "#/$defs/propertyDefinitions/side" }
