---
"$schema": https://json-schema.org/draft/2020-12/schema
title: Transportation Segment
description: >-
  Segments are paths which can be traveled by people or things. Segments
  are compatible with GeoJSON LineString features.
type: object
properties:
  id:
    "$ref": ../defs.yaml#/$defs/propertyDefinitions/id
  geometry:
    description: >-
      Segment's geometry which MUST be a LineSting as defined by GeoJSON
      schema.
    unevaluatedProperties: false
    allOf:
      - "$ref": https://geojson.org/schema/LineString.json
  properties:
    unevaluatedProperties: false
    required: [subtype]
    allOf:
      - title: "Conditional Properties"
        if: { properties: { subtype: { enum: [road] } } }
        then:
          properties:
            road: { "$ref": "#/$defs/propertyDefinitions/road" }
      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer
      - "$ref": ../defs.yaml#/$defs/propertyContainers/levelContainer
    properties:
      subtype:
        description: Broad category of transportation segment.
        type: string
        enum: [road, rail, water]
        "$comment": >-
          Should not be confused with a transport mode. A segment
          kind has an (implied) set of default transport modes.
      connectors:
        "$comment": 'FIXME: Must rename to connectorIds to meet schema standard'
        description: >-
          List of connectors this segment is physically connected to.
          Each connector is a possible routing decision point meaning it
          defines place along segment in which there is possibility to
          transition to other segments which share same connector.
        type: array
        items:
          type: string
          "$comment": >-
            Each entry in this array is the GERS ID of a transportation connector feature.
        uniqueItems: true
        default: []
      names: { "$ref": "../defs.yaml#/$defs/propertyDefinitions/names" }
"$defs":
  propertyDefinitions:
    lane:
      description: Properties for a single lane of traffic.
      type: object
      unevaluatedProperties: false
      required: [direction]
      properties:
        direction: { "$ref": "#/$defs/propertyDefinitions/laneDirection" }
        restrictions:
          description: Restrictions on how the lane may be used
          "$comment": >-
            Lane restrictions may be defined in the same way as for whole roads with the exception
            of turns; there are no turn restrictions for lanes.
          type: object
          unevaluatedProperties: false
          properties:
            speed_limits:
              "$ref": "#/$defs/propertyContainers/speedLimitsContainer"
            access:
              "$ref": "#/$defs/propertyContainers/accessContainer"
            min_occupancy:
              description: >-
                Minimal occupancy restrictions relate to HOV (high occupancy vehicles) travel modes.
                If a lane is restricted for use only by HOVs, then the default minimum vehicle
                occupancy qualifying as HOV is 2+ passengers (including the driver).  This
                restriction can be provided to override the default definition of HOV.
              oneOf:
                - "$ref": "#/$defs/propertyDefinitions/relationalExpression"
                - type: array
                  items:
                    type: object
                    unevaluatedProperties: false
                    allOf:
                      - "$ref": "#/$defs/propertyContainers/ruleContainer"
                      - "$ref": "#/$defs/propertyDefinitions/relationalExpression"
    laneDirection:
      type: string
      enum:
        - forward       # Traffic flows in the segment direction.
        - backward      # Traffic flows against the segment direction.
        - both_ways     # Traffic flows simultaneously in both directions as, e.g., on a sidewalk.
        - alternating   # Traffic flows alternately forward and backward following a predictable rhythm.
        - reversible    # Traffic flows forward, but may be arbitrarily reversed by traffic authorities at any time.
    heading:
      description: >-
        Enumerates possible travel headings along segment geometry.
      type: string
      enum: [ forward, backward ]

    mode:
      description: >-
        Enumerates possible travel modes. Some modes represent groups
        of modes.
      type: string
      enum: [ motor_vehicle, car, truck, motorcycle, foot, bicycle, bus, hgv, hov, emergency ]
      "$comment": >-
        motor_vehicle includes car, truck and motorcycle
    road:
      description: >-
        Properties for segments whose segment subtype is road. The road
        subtype includes any variety of road, street, or path, including
        dedicated paths for walking and cycling.
      type: object
      unevaluatedProperties: false
      default: {}
      properties:
        class:
          description: >-
            Captures the kind of road and its position in the road
            network hierarchy.
          type: string
          enum:
            - motorway
            - primary
            - secondary
            - tertiary
            - residential
            - living_street   # Similar to residential but has implied legal restriction for motor vehicles (which can vary country by country)
            - trunk
            - unclassified    # Known roads, paved, but subordinate to all of: motorway, trunk, primary, secondary, tertiary
            - parking_aisle   # Service road intended for parking
            - driveway        # Service road intended for deliveries
            - pedestrian
            - footway
            - sidewalk
            - crosswalk
            - steps
            - track
            - cycleway
            - bridleway       # Similar to track but has implied access only for horses
            - unknown
          default:
            enum: [ unknown ]
        surface:
          description: Physical surface of the road. May either be
            specified as a single global value for the segment, or as
            an array of surface rules.
          oneOf:
            - { "$ref": "#/$defs/propertyDefinitions/roadSurface" }
            - type: array
              items:
                type: object
                allOf:
                  - { "$ref": "../defs.yaml#/$defs/propertyContainers/atRangeContainer" }
                unevaluatedProperties: false
                properties:
                  value: { "$ref": "#/$defs/propertyDefinitions/roadSurface" }
              minItems: 1
              uniqueItems: true
          default:
            enum: unknown
          "$comment": >-
            We should likely restrict the available surface types to
            the subset of the common OSM surface=* tag values that are
            useful both for routing and for map tile rendering.
        flags:
          description: >-
            Set of boolean attributes applicable to roads. May be
            specified either as a single flag array of flag values, or
            as an array of flag rules.
          type: array
          items:
            oneOf:
              - { "$ref": "#/$defs/propertyDefinitions/roadFlag" }
              - type: object
                allOf:
                  - { "$ref": "../defs.yaml#/$defs/propertyContainers/atRangeContainer" }
                unevaluatedProperties: false
                properties:
                  values:
                    type: array
                    items: { "$ref": "#/$defs/propertyDefinitions/roadFlag" }
                    uniqueItems: true
          uniqueItems: true
        width:
          description: >-
            Edge-to-edge width of the road modeled by this segment, in
            meters.
    
            Examples: (1) If this segment models a carriageway without
            sidewalk, this value represents the edge-to-edge width of the
            carriageway, inclusive of any shoulder. (2) If this segment
            models a sidewalk by itself, this value represents the
            edge-to-edge width of the sidewalk. (3) If this segment models a
            combined sidewalk and carriageway, this value represents the
            edge-to-edge width inclusive of sidewalk.
          type: array
          items:
            type: object
            allOf:
              - { "$ref": "../defs.yaml#/$defs/propertyContainers/atRangeContainer" }
            properties:
              value:
                type: number
                exclusiveMinimum: 0
            unevaluatedProperties: false
          minItems: 1
          uniqueItems: true
        lanes:
          description: >-
            Describes the layout of lanes on the road plus lane-related
            information, including where appropriate: physical lane location,
            allowed travel modes, and more.
          oneOf:
            - type: array
              items: { "$ref": "#/$defs/propertyDefinitions/lane" }
              minItems: 1
            - type: array
              items:
                type: object
                allOf:
                  - "$ref": "../defs.yaml#/$defs/propertyContainers/atRangeContainer"
                    default:
                      - 0
                      - 100
                unevaluatedProperties: false
                properties:
                  value:
                    type: array
                    items: { "$ref": "#/$defs/propertyDefinitions/lane" }
                    minItems: 1
              minItems: 1
        restrictions:
          description: Restrictions on how the road may be used
          type: object
          unevaluatedProperties: false
          properties:
            speed_limits: { "$ref": "#/$defs/propertyContainers/speedLimitsContainer" }
            access: { "$ref": "#/$defs/propertyContainers/accessContainer" }
            prohibited_transitions:
              description: >-
                Rules preventing transitions from this segment to
                another segment.
              type: array
              items:
                 unevaluatedProperties: false
                 allOf:
                   - "$ref": "#/$defs/propertyContainers/ruleContainer"
                   - "$ref": "#/$defs/propertyContainers/duringContainer"
                 type: object
                 properties:
                   reason:
                     "$comment": TODO - This property should be dropped and handled by inhibitors/barriers.
                     description: >-
                       A rough description of why the transition is
                       prohibited.
                     type: string
                     enum:
                       - legal
                       - divider
                       - gated_permission
                       - gated_key
                     default:
                       enum: [legal]
                   sequence:
                     description: >-
                       Ordered sequence of connector/segment pairs that it is
                       prohibited to follow from this segment.
                     type: array
                     items:
                       description: Pair of segment and connector IDs along the sequence
                       "$ref": "#/$defs/propertyDefinitions/sequenceEntry"
                     minItems: 1
                     uniqueItems: true
                   final_heading:
                     description: >-
                       Direction of travel that is prohibited on the destination
                       segment of the sequence.
                     "$ref": "#/$defs/propertyDefinitions/heading"

    roadFlag:
      description: Simple flags that can be on or off for a road segment
      type: string
      enum:
        - is_bridge
        - is_link
        - is_tunnel
        - is_under_construction
    roadSurface:
      description: Physical surface of the road
      type: string
      enum:
        - unknown
        - paved
        - unpaved
        - gravel
        - dirt
        - paving_stones
        - metal
    speed:
      description: >-
        A speed value, i.e. a certain number of distance units
        travelled per unit time.
      type: array
      prefixItems:
        - description: Number of speed units
          type: integer
          minimum: 20
        - description: One speed unit
          type: string
          enum: [ "km/h", "mph" ]
      additionalItems: false
    accessOption:
      description: Effect of an access restriction rule
      type: string
      enum:
        - allowed
        - denied
    usageOption:
      description: >-
        Reason why a person or entity travelling on the transportation
        network is using a particular location.
      type: string
      enum:
        - as_customer
        - at_destination
        - to_deliver
        - to_farm
        - for_forestry
    recognizedOption:
      description: >-
        Status of the person or entity travelling as recognized by
        authorities controlling the particular location
      type: string
      enum:
        - as_permitted
        - as_private
        - as_disabled
        - as_employee
        - as_student
    relationalExpression:
      description: >-
        Creates a relational expression with the containing object.
      oneOf:
        - type: object
          required: [is_more_than]
          properties:
            is_more_than:
              type: number
        - type: object
          required: [is_at_least]
          properties:
            is_at_least:
              type: number
        - type: object
          required: [is_equal_to]
          properties:
            is_equal_to:
              type: number
        - type: object
          required: [is_at_most]
          properties:
            is_at_most:
              type: number
        - type: object
          required: [is_less_than]
          properties:
            is_less_than:
              type: number
    sequenceEntry:
      description: >-
        A segment/connector pair in a prohibited transition sequence.
      type: object
      required: [connector_id, segment_id]
      properties:
        connector_id:
          description: >-
            Identifies the point of physical connection between the
            previous segment in the sequence and the segment in this
            sequence entry.
          type: string
        segment_id:
          description: >-
            Identifies the segment that the previous segment in the
            sequence is physically connected to via the sequence entry's
            connector.
          type: string
  propertyContainers:
    duringContainer:
      "$comment": >-
        Temporal scoping properties defining the time spans when a
        recurring rule is active.
      properties:
        during:
          "$ref": ../defs.yaml#/$defs/propertyDefinitions/openingHours
    modesContainer:
      description: >-
        Properties defining travel modes for which a rule is active.
      type: object
      oneOf:
        - not:
            anyOf:
              - required: [mode]
              - required: [mode_not]
        - required: [mode]
          properties:
            mode:
              description: Travel mode to which the rule applies
              type: array
              items:
                "$ref": "#/$defs/propertyDefinitions/mode"
              uniqueItems: true
              minLength: 1
        - required: [mode_not]
          properties:
            mode_not:
              description: Travel modes to which the rule does not apply
              type: array
              items:
                "$ref": "#/$defs/propertyDefinitions/mode"
              uniqueItems: true
              minLength: 1
      "$comment": >-
        If neither mode nor mode_not is specified, the rule has the
        default travel modes for the segment subtype.
    headingContainer:
      description: Properties defining heading for which a rule is active.
      properties:
        heading:
          "$ref": "#/$defs/propertyDefinitions/heading"
    speedLimitsContainer:
      description: Rules governing speed on this road segment or lane
      type: array
      items:
        description: An individual speed limit rule
        "$comment": >-
          TODO: Speed limits probably have directionality, so
          should factor out a headingContainer for this
          purpose and use it to introduce an optional
          direction property in each rule.
        type: object
        anyOf:
          - required: [ min_speed ]
          - required: [ max_speed ]
        allOf:
          - "$ref": "#/$defs/propertyContainers/modesContainer"
          - { "$ref": "../defs.yaml#/$defs/propertyContainers/atRangeContainer" }
          - "$ref": "#/$defs/propertyContainers/duringContainer"
        unevaluatedProperties: false
        properties:
          min_speed: { "$ref": "#/$defs/propertyDefinitions/speed" }
          max_speed: { "$ref": "#/$defs/propertyDefinitions/speed" }
          is_max_speed_variable:
            description: Indicates a variable speed corridor
            type: boolean
            default: false
    accessContainer:
      description: Rules governing access to this road segment or lane
      type: array
      items:
        oneOf:
          - "$ref": "#/$defs/propertyDefinitions/accessOption"
          - type: object
            oneOf:
              - required: [ allowed ]
                properties:
                  allowed:
                    type: object
                    unevaluatedProperties: false
                    allOf:
                      - { "$ref": "../defs.yaml#/$defs/propertyContainers/atRangeContainer" }
                      - { "$ref": "#/$defs/propertyContainers/duringContainer" }
                      - { "$ref": "#/$defs/propertyContainers/ruleContainer" }
                      - { "$ref": "#/$defs/propertyContainers/headingContainer" }
              - required: [ designated ]
                properties:
                  designated:
                    type: object
                    unevaluatedProperties: false
                    allOf:
                      - { "$ref": "../defs.yaml#/$defs/propertyContainers/atRangeContainer" }
                      - { "$ref": "#/$defs/propertyContainers/duringContainer" }
                      - { "$ref": "#/$defs/propertyContainers/ruleContainer" }
                      - { "$ref": "#/$defs/propertyContainers/headingContainer" }
              - required: [ denied ]
                properties:
                  denied:
                    type: object
                    unevaluatedProperties: false
                    allOf:
                      - { "$ref": "../defs.yaml#/$defs/propertyContainers/atRangeContainer" }
                      - { "$ref": "#/$defs/propertyContainers/duringContainer" }
                      - { "$ref": "#/$defs/propertyContainers/ruleContainer" }
                      - { "$ref": "#/$defs/propertyContainers/headingContainer" }
            minLength: 1
    ruleContainer:
      description: >-
        Properties that allow defining rules from environmental and subjective scoping properties .
      type: object
      properties:
        when:
          description: describes a set of condition
          type: object
          allOf:
            - "$ref": "#/$defs/propertyContainers/modesContainer"
            - "$ref": "#/$defs/propertyContainers/headingContainer"
          unevaluatedProperties: false
          properties:
            using:
              type: array
              items:
                "$ref": "#/$defs/propertyDefinitions/usageOption"
            recognized:
              type: array
              items:
                "$ref": "#/$defs/propertyDefinitions/recognizedOption"
            vehicle:
              type: object
              properties:
                axle_count:
                  "$ref": "#/$defs/propertyDefinitions/relationalExpression"
                length:
                  "$ref": "#/$defs/propertyDefinitions/relationalExpression"
                weight:
                  "$ref": "#/$defs/propertyDefinitions/relationalExpression"
